# Copyright 2024 Ant Group Co., Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("//bazel:curve.bzl", "curve_cc_binary", "curve_cc_library", "curve_cc_test")
package(default_visibility = ["//visibility:public"])

curve_cc_library(
    name = "ecdh_oprf",
    srcs = ["ecdh_oprf.cc"],
    hdrs = ["ecdh_oprf.h"],
    # Openssl::libcrypto requires `dlopen`...
    linkopts = ["-ldl"],
    deps = [
        "@psi//psi/cryptor:ecc_cryptor",
        "@abseil-cpp//absl/types:span",
        "@openssl",
        "@yacl//yacl/base:byte_container_view",
        "@yacl//yacl/base:exception",
        "@yacl//yacl/utils:parallel",
    ],
)

curve_cc_library(
    name = "basic_ecdh_oprf",
    srcs = ["basic_ecdh_oprf.cc"],
    hdrs = ["basic_ecdh_oprf.h"],
    defines = [
        "__LINUX__",
    ] + select({
        "@bazel_tools//src/conditions:linux_x86_64": [
            "_AMD64_",
            "_ASM_",
        ],
        "@bazel_tools//src/conditions:darwin_arm64": [
            "_ARM64_",
        ],
        "//conditions:default": [
            "_AMD64_",
        ],
    }),
    deps = [
        ":ecdh_oprf",
        "@psi//psi/cryptor:ecc_utils",
        "@psi//psi/cryptor:sm2_cryptor",
        "@abseil-cpp//absl/types:span",
        "@fourqlib//:FourQlib",
        "@yacl//yacl/base:exception",
        "@yacl//yacl/crypto/hash:blake3",
        "@yacl//yacl/crypto/hash:hash_utils",
        "@yacl//yacl/utils:parallel",
    ],
)

curve_cc_library(
    name = "ecdh_oprf_selector",
    srcs = ["ecdh_oprf_selector.cc"],
    hdrs = ["ecdh_oprf_selector.h"],
    deps = [
        ":basic_ecdh_oprf",
        "@yacl//yacl/utils:platform_utils",
    ],
)

curve_cc_test(
    name = "basic_ecdh_oprf_test",
    srcs = ["basic_ecdh_oprf_test.cc"],
    deps = [
        ":basic_ecdh_oprf",
        ":ecdh_oprf_selector",
        "@yacl//yacl/crypto/rand",
    ],
)
